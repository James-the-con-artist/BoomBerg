{"ast":null,"code":"var _class;\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\nexport default class CSAPI {\n  constructor() {}\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  async fetchItemStats(hashname) {\n    const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const dataProfile = {\n        name: data.name,\n        image: data.image,\n        pricelatest: data.pricelatest,\n        pricelatestsell: data.pricelatestsell,\n        pricemedian: data.pricemedian,\n        priceavg: data.priceavg,\n        pricemin: data.pricemin,\n        pricemax: data.pricemax,\n        pricesafe7d: data.pricesafe7d,\n        pricesafe30d: data.pricesafe30d,\n        pricesafe90d: data.pricesafe90d,\n        offervolume: data.offervolume,\n        sold24h: data.sold24h,\n        sold7d: data.sold7d,\n        sold30d: data.sold30d,\n        sold90d: data.sold90d\n      };\n      console.log(\"fetchItemStats run.\");\n      console.log(data);\n      return dataProfile;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n  async fetchRandomProfiles(limit) {\n    const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const dataProfile = {\n        iD: data[0].steamID,\n        username: data[0].personaname,\n        fullAvatarImg: data[0].avatarfull,\n        countryCode: data[0].loccountrycode,\n        inventoryValue: data[0].inventoryworth.worth,\n        inventorySize: data[0].inventoryworth.size\n      };\n      console.log(\"fetchRandomProfiles run.\");\n      console.log(data);\n      return dataProfile;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n  async fetchItemHistory(hashname) {\n    const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&start_date=2023-01-01&end_date=2024-01-01`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const historyList = data.map(item => {\n        return {\n          avg: item.avg,\n          median: item.median,\n          price: item.price,\n          sold: item.sold,\n          createdat: item.createdat\n        };\n      });\n      return historyList; // Return the array of history objects\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n}\n_class = CSAPI;\nCSAPI._instance = void 0;\nexport const CSAPIInstance = CSAPI.Instance;\n\n/*\n\n    \"pricelatest\": 124.85,\n    \"pricelatestsell\": 117.65,\n    \"pricemix\": 117.65,\n    \"pricemedian\": 125.85,\n    \"pricereal\": 75,\n    \"pricesafe\": 115.74,\n    \"priceavg\": 150.22,\n    \"pricemin\": 97.47,\n    \"pricemax\": 164.04,\n    \"pricesafe24h\": 106.86,\n    \"pricesafe7d\": 106.86,\n    \"pricesafe30d\": 117.82,\n    \"pricesafe90d\": 125.77,\n    \"trendpoint\": 40,\n    \"offervolume\": 47,\n    \"hourstosold\": 3,\n    \"sold24h\": 12,\n    \"sold7d\": 55,\n    \"sold30d\": 249,\n    \"sold90d\": 896,\n    \"buyorderprice\": 115.74,\n    \"buyordermedian\": 115.7,\n*/\n/*\n[\n    {\n        \"id\": 103705028,\n        \"avg\": 1264.02,\n        \"median\": 1264.02,\n        \"price\": 1326.5,\n        \"sold\": 2,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-11-15T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704996,\n        \"avg\": 1433.54,\n        \"median\": 1433.54,\n        \"price\": 1433.54,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-26T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704977,\n        \"avg\": 1891.59,\n        \"median\": 1891.59,\n        \"price\": 1891.59,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704937,\n        \"avg\": 1676.22,\n        \"median\": 1676.22,\n        \"price\": 1676.22,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-16T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704926,\n        \"avg\": 1566.11,\n        \"median\": 1566.11,\n        \"price\": 1566.11,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    }\n]\n*/","map":{"version":3,"names":["API_KEY","CSAPI","constructor","Instance","_instance","fetchItemStats","hashname","apiUrl","response","fetch","ok","Error","status","data","json","dataProfile","name","image","pricelatest","pricelatestsell","pricemedian","priceavg","pricemin","pricemax","pricesafe7d","pricesafe30d","pricesafe90d","offervolume","sold24h","sold7d","sold30d","sold90d","console","log","error","fetchRandomProfiles","limit","iD","steamID","username","personaname","fullAvatarImg","avatarfull","countryCode","loccountrycode","inventoryValue","inventoryworth","worth","inventorySize","size","fetchItemHistory","historyList","map","item","avg","median","price","sold","createdat","_class","CSAPIInstance"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/CounterStrikeApi.ts"],"sourcesContent":["import { Item, SteamProfile, History } from \"./CSAPIModels\";\n\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\n\nexport default class CSAPI {\n\n    private static _instance: CSAPI;\n\n    private constructor() { }\n\n    public static get Instance() {\n        return this._instance || (this._instance = new this());\n    }\n\n    public async fetchItemStats(hashname: string): Promise<Item | null> {\n        const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile: Item = {\n                name: data.name,\n                image: data.image,\n                pricelatest: data.pricelatest,\n                pricelatestsell: data.pricelatestsell,\n                pricemedian: data.pricemedian,\n                priceavg: data.priceavg,\n                pricemin: data.pricemin,\n                pricemax: data.pricemax,\n                pricesafe7d: data.pricesafe7d,\n                pricesafe30d: data.pricesafe30d,\n                pricesafe90d: data.pricesafe90d,\n                offervolume: data.offervolume,\n                sold24h: data.sold24h,\n                sold7d: data.sold7d,\n                sold30d: data.sold30d,\n                sold90d: data.sold90d,\n            }\n\n            console.log(\"fetchItemStats run.\");\n\n            console.log(data);\n            return dataProfile;\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n\n    public async fetchRandomProfiles(limit: number): Promise<SteamProfile | null> {\n        const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile: SteamProfile = {\n                iD: data[0].steamID,\n                username: data[0].personaname,\n                fullAvatarImg: data[0].avatarfull,\n                countryCode: data[0].loccountrycode,\n                inventoryValue: data[0].inventoryworth.worth,\n                inventorySize: data[0].inventoryworth.size\n            }\n\n            console.log(\"fetchRandomProfiles run.\");\n\n            console.log(data);\n            return dataProfile;\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n\n    public async fetchItemHistory(hashname: string): Promise<History[] | null> {\n        const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&start_date=2023-01-01&end_date=2024-01-01`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n    \n            const data = await response.json();\n    \n            const historyList: History[] = data.map((item: any) => {\n                return {\n                    avg: item.avg,\n                    median: item.median,\n                    price: item.price,\n                    sold: item.sold,\n                    createdat: item.createdat,\n                };\n            });\n    \n            return historyList; // Return the array of history objects\n    \n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n    \n\n}\n\n\nexport const CSAPIInstance = CSAPI.Instance;\n\n/*\n\n    \"pricelatest\": 124.85,\n    \"pricelatestsell\": 117.65,\n    \"pricemix\": 117.65,\n    \"pricemedian\": 125.85,\n    \"pricereal\": 75,\n    \"pricesafe\": 115.74,\n    \"priceavg\": 150.22,\n    \"pricemin\": 97.47,\n    \"pricemax\": 164.04,\n    \"pricesafe24h\": 106.86,\n    \"pricesafe7d\": 106.86,\n    \"pricesafe30d\": 117.82,\n    \"pricesafe90d\": 125.77,\n    \"trendpoint\": 40,\n    \"offervolume\": 47,\n    \"hourstosold\": 3,\n    \"sold24h\": 12,\n    \"sold7d\": 55,\n    \"sold30d\": 249,\n    \"sold90d\": 896,\n    \"buyorderprice\": 115.74,\n    \"buyordermedian\": 115.7,\n*/\n/*\n[\n    {\n        \"id\": 103705028,\n        \"avg\": 1264.02,\n        \"median\": 1264.02,\n        \"price\": 1326.5,\n        \"sold\": 2,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-11-15T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704996,\n        \"avg\": 1433.54,\n        \"median\": 1433.54,\n        \"price\": 1433.54,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-26T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704977,\n        \"avg\": 1891.59,\n        \"median\": 1891.59,\n        \"price\": 1891.59,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704937,\n        \"avg\": 1676.22,\n        \"median\": 1676.22,\n        \"price\": 1676.22,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-16T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704926,\n        \"avg\": 1566.11,\n        \"median\": 1566.11,\n        \"price\": 1566.11,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    }\n]\n*/"],"mappings":"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D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAElC,MAAMqC,WAAsB,GAAGtC,IAAI,CAACuC,GAAG,CAAEC,IAAS,IAAK;QACnD,OAAO;UACHC,GAAG,EAAED,IAAI,CAACC,GAAG;UACbC,MAAM,EAAEF,IAAI,CAACE,MAAM;UACnBC,KAAK,EAAEH,IAAI,CAACG,KAAK;UACjBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;UACfC,SAAS,EAAEL,IAAI,CAACK;QACpB,CAAC;MACL,CAAC,CAAC;MAEF,OAAOP,WAAW,CAAC,CAAC;IAExB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACf;EACJ;AAGJ;AAACyB,MAAA,GA7GoB1D,KAAK;AAALA,KAAK,CAEPG,SAAS;AA8G5B,OAAO,MAAMwD,aAAa,GAAG3D,KAAK,CAACE,QAAQ;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}