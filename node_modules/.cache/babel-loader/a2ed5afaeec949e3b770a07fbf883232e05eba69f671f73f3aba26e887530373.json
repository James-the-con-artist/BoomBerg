{"ast":null,"code":"var _class;\nimport fetch from 'node-fetch';\nclass OpenAIChatbot {\n  constructor(apiKey) {\n    this.apiKey = void 0;\n    this.conversationArr = void 0;\n    this.apiKey = apiKey;\n    this.conversationArr = [{\n      role: 'system',\n      content: 'You are a CSGO Financial analyst.'\n    }];\n  }\n  static getInstance(apiKey) {\n    if (!OpenAIChatbot.instance) {\n      OpenAIChatbot.instance = new OpenAIChatbot(apiKey);\n    }\n    return OpenAIChatbot.instance;\n  }\n  async sendMessage(userMessage) {\n    this.conversationArr.push({\n      role: 'user',\n      content: userMessage\n    });\n    const requestBody = {\n      model: \"text-davinci-004\",\n      // Replace with the GPT-4 model you're using\n      messages: this.conversationArr\n    };\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error(`Error from OpenAI: ${response.statusText}`);\n      }\n      const data = await response.json();\n      const aiResponse = data.choices[0].message.content;\n      this.conversationArr.push({\n        role: 'assistant',\n        content: aiResponse\n      });\n      return aiResponse;\n    } catch (error) {\n      console.error('Error sending message to OpenAI:', error);\n      throw error;\n    }\n  }\n}\n_class = OpenAIChatbot;\nOpenAIChatbot.instance = void 0;\nexport default OpenAIChatbot;","map":{"version":3,"names":["fetch","OpenAIChatbot","constructor","apiKey","conversationArr","role","content","getInstance","instance","sendMessage","userMessage","push","requestBody","model","messages","response","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","aiResponse","choices","message","error","console","_class"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/OpenAIAPI.ts"],"sourcesContent":["import fetch from 'node-fetch';\n\ntype Message = {\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n};\n\nclass OpenAIChatbot {\n    private static instance: OpenAIChatbot;\n    private apiKey: string;\n    private conversationArr: Message[];\n\n    private constructor(apiKey: string) {\n        this.apiKey = apiKey;\n        this.conversationArr = [\n            {\n                role: 'system',\n                content: 'You are a CSGO Financial analyst.'\n            }\n        ];\n    }\n\n    public static getInstance(apiKey: string): OpenAIChatbot {\n        if (!OpenAIChatbot.instance) {\n            OpenAIChatbot.instance = new OpenAIChatbot(apiKey);\n        }\n        return OpenAIChatbot.instance;\n    }\n\n    public async sendMessage(userMessage: string): Promise<string> {\n        this.conversationArr.push({\n            role: 'user',\n            content: userMessage\n        });\n\n        const requestBody = {\n            model: \"text-davinci-004\", // Replace with the GPT-4 model you're using\n            messages: this.conversationArr\n        };\n\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Error from OpenAI: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            const aiResponse = data.choices[0].message.content;\n            this.conversationArr.push({\n                role: 'assistant',\n                content: aiResponse\n            });\n\n            return aiResponse;\n        } catch (error) {\n            console.error('Error sending message to OpenAI:', error);\n            throw error;\n        }\n    }\n}\n\nexport default OpenAIChatbot;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,YAAY;AAO9B,MAAMC,aAAa,CAAC;EAKRC,WAAWA,CAACC,MAAc,EAAE;IAAA,KAH5BA,MAAM;IAAA,KACNC,eAAe;IAGnB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,eAAe,GAAG,CACnB;MACIC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb,CAAC,CACJ;EACL;EAEA,OAAcC,WAAWA,CAACJ,MAAc,EAAiB;IACrD,IAAI,CAACF,aAAa,CAACO,QAAQ,EAAE;MACzBP,aAAa,CAACO,QAAQ,GAAG,IAAIP,aAAa,CAACE,MAAM,CAAC;IACtD;IACA,OAAOF,aAAa,CAACO,QAAQ;EACjC;EAEA,MAAaC,WAAWA,CAACC,WAAmB,EAAmB;IAC3D,IAAI,CAACN,eAAe,CAACO,IAAI,CAAC;MACtBN,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEI;IACb,CAAC,CAAC;IAEF,MAAME,WAAW,GAAG;MAChBC,KAAK,EAAE,kBAAkB;MAAE;MAC3BC,QAAQ,EAAE,IAAI,CAACV;IACnB,CAAC;IAED,IAAI;MACA,MAAMW,QAAQ,GAAG,MAAMf,KAAK,CAAC,4CAA4C,EAAE;QACvEgB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAAS,IAAI,CAACd,MAAO;QAC3C,CAAC;QACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;MACpC,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,sBAAqBP,QAAQ,CAACQ,UAAW,EAAC,CAAC;MAChE;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC,MAAMC,UAAU,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACtB,OAAO;MAClD,IAAI,CAACF,eAAe,CAACO,IAAI,CAAC;QACtBN,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAEoB;MACb,CAAC,CAAC;MAEF,OAAOA,UAAU;IACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACf;EACJ;AACJ;AAACE,MAAA,GA5DK9B,aAAa;AAAbA,aAAa,CACAO,QAAQ;AA6D3B,eAAeP,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}