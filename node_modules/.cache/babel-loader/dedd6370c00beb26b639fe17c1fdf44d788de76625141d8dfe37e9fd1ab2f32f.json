{"ast":null,"code":"var _class;\nclass OpenAIApiSingleton {\n  constructor(apiKey) {\n    this.apiKey = void 0;\n    this.apiKey = apiKey;\n  }\n  static getInstance(apiKey) {\n    if (!OpenAIApiSingleton.instance) {\n      OpenAIApiSingleton.instance = new OpenAIApiSingleton(apiKey);\n    }\n    return OpenAIApiSingleton.instance;\n  }\n  async generateText(prompt) {\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify(prompt)\n      });\n      if (!response.ok) {\n        throw new Error(`Error from OpenAI: ${response.statusText}`);\n      }\n      const data = await response.json();\n\n      // Add AI response to the conversation array\n      const aiMessage = data.choices[0].message.content;\n      return aiMessage;\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      throw error;\n    }\n  }\n}\n_class = OpenAIApiSingleton;\nOpenAIApiSingleton.instance = void 0;\nexport default OpenAIApiSingleton;","map":{"version":3,"names":["OpenAIApiSingleton","constructor","apiKey","getInstance","instance","generateText","prompt","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","aiMessage","choices","message","content","error","console","_class"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/OpenAIAPI.ts"],"sourcesContent":["class OpenAIApiSingleton {\n    private static instance: OpenAIApiSingleton;\n    private apiKey: string;\n\n    private constructor(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    public static getInstance(apiKey: string): OpenAIApiSingleton {\n        if (!OpenAIApiSingleton.instance) {\n            OpenAIApiSingleton.instance = new OpenAIApiSingleton(apiKey);\n        }\n        return OpenAIApiSingleton.instance;\n    }\n\n    public async generateText(prompt: string): Promise<string> {\n\n        try {\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify(prompt)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Error from OpenAI: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n\n            // Add AI response to the conversation array\n            const aiMessage = data.choices[0].message.content;\n            return aiMessage;\n        } catch (error) {\n            console.error('Error calling OpenAI API:', error);\n            throw error;\n        }\n    }\n}\n\nexport default OpenAIApiSingleton;"],"mappings":";AAAA,MAAMA,kBAAkB,CAAC;EAIbC,WAAWA,CAACC,MAAc,EAAE;IAAA,KAF5BA,MAAM;IAGV,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EAEA,OAAcC,WAAWA,CAACD,MAAc,EAAsB;IAC1D,IAAI,CAACF,kBAAkB,CAACI,QAAQ,EAAE;MAC9BJ,kBAAkB,CAACI,QAAQ,GAAG,IAAIJ,kBAAkB,CAACE,MAAM,CAAC;IAChE;IACA,OAAOF,kBAAkB,CAACI,QAAQ;EACtC;EAEA,MAAaC,YAAYA,CAACC,MAAc,EAAmB;IAEvD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAAS,IAAI,CAACR,MAAO;QAC3C,CAAC;QACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,MAAM;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,sBAAqBR,QAAQ,CAACS,UAAW,EAAC,CAAC;MAChE;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,OAAO;MACjD,OAAOH,SAAS;IACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;AACJ;AAACE,MAAA,GAzCKzB,kBAAkB;AAAlBA,kBAAkB,CACLI,QAAQ;AA0C3B,eAAeJ,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}