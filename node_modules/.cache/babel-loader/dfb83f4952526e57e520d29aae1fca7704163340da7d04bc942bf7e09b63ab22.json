{"ast":null,"code":"var _class;\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\nexport default class CSAPI {\n  constructor() {}\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  async fetchItemStats(hashname) {\n    const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n    const response = await fetch(apiUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    const dataProfile = {\n      name: data.marketname,\n      pricelatest: data.pricelatest,\n      pricelatestsell: data.pricelatestsell,\n      pricemix: data.pricemix,\n      pricemedian: data.pricemedian,\n      pricereal: data.pricereal,\n      pricesafe: data.pricesafe,\n      priceavg: data.priceavg,\n      pricemin: data.pricemin,\n      pricemax: data.pricemax,\n      pricesafe24h: data.pricesafe24h,\n      pricesafe7d: data.pricesafe7d,\n      pricesafe30d: data.pricesafe30d,\n      pricesafe90d: data.pricesafe90d,\n      trendpoint: data.trendpoint,\n      offervolume: data.offervolume,\n      hourstosold: data.hourstosold,\n      sold24h: data.sold24h,\n      sold7d: data.sold7d,\n      sold30d: data.sold30d,\n      sold90d: data.sold90d,\n      buyorderprice: data.buyorderprice,\n      buyordermedian: data.buyordermedian,\n      buyorderavg: data.buyorderavg,\n      buyordervolume: data.buyordervolume,\n      image: data.image\n    };\n    console.log(\"fetchItemStats run.\");\n    console.log(data);\n    return dataProfile;\n  }\n  async fetchRandomProfiles(limit) {\n    const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const dataProfile = {\n        iD: data[0].steamID,\n        username: data[0].personaname,\n        fullAvatarImg: data[0].avatarfull,\n        countryCode: data[0].loccountrycode,\n        inventoryValue: data[0].inventoryworth.worth,\n        inventorySize: data[0].inventoryworth.size\n      };\n      console.log(\"fetchRandomProfiles run.\");\n      console.log(data);\n      return dataProfile;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n  async fetchItemHistory(hashname) {\n    const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&start_date=2023-01-01&end_date=2024-01-01`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // const dataProfile:History = {\n      // avg: data\n      // }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n    return null;\n  }\n}\n_class = CSAPI;\nCSAPI._instance = void 0;\nexport const CSAPIInstance = CSAPI.Instance;\n\n/*\n\n    \"pricelatest\": 124.85,\n    \"pricelatestsell\": 117.65,\n    \"pricemix\": 117.65,\n    \"pricemedian\": 125.85,\n    \"pricereal\": 75,\n    \"pricesafe\": 115.74,\n    \"priceavg\": 150.22,\n    \"pricemin\": 97.47,\n    \"pricemax\": 164.04,\n    \"pricesafe24h\": 106.86,\n    \"pricesafe7d\": 106.86,\n    \"pricesafe30d\": 117.82,\n    \"pricesafe90d\": 125.77,\n    \"trendpoint\": 40,\n    \"offervolume\": 47,\n    \"hourstosold\": 3,\n    \"sold24h\": 12,\n    \"sold7d\": 55,\n    \"sold30d\": 249,\n    \"sold90d\": 896,\n    \"buyorderprice\": 115.74,\n    \"buyordermedian\": 115.7,\n*/\n/*\n[\n    {\n        \"id\": 103705028,\n        \"avg\": 1264.02,\n        \"median\": 1264.02,\n        \"price\": 1326.5,\n        \"sold\": 2,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-11-15T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704996,\n        \"avg\": 1433.54,\n        \"median\": 1433.54,\n        \"price\": 1433.54,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-26T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704977,\n        \"avg\": 1891.59,\n        \"median\": 1891.59,\n        \"price\": 1891.59,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704937,\n        \"avg\": 1676.22,\n        \"median\": 1676.22,\n        \"price\": 1676.22,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-16T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704926,\n        \"avg\": 1566.11,\n        \"median\": 1566.11,\n        \"price\": 1566.11,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    }\n]\n*/","map":{"version":3,"names":["API_KEY","CSAPI","constructor","Instance","_instance","fetchItemStats","hashname","apiUrl","response","fetch","ok","Error","status","data","json","dataProfile","name","marketname","pricelatest","pricelatestsell","pricemix","pricemedian","pricereal","pricesafe","priceavg","pricemin","pricemax","pricesafe24h","pricesafe7d","pricesafe30d","pricesafe90d","trendpoint","offervolume","hourstosold","sold24h","sold7d","sold30d","sold90d","buyorderprice","buyordermedian","buyorderavg","buyordervolume","image","console","log","fetchRandomProfiles","limit","iD","steamID","username","personaname","fullAvatarImg","avatarfull","countryCode","loccountrycode","inventoryValue","inventoryworth","worth","inventorySize","size","error","fetchItemHistory","_class","CSAPIInstance"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/CounterStrikeApi.ts"],"sourcesContent":["import { Item, SteamProfile, History } from \"./CSAPIModels\";\n\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\n\nexport default class CSAPI {\n   \n    private static _instance: CSAPI;\n\n    private constructor() {}\n\n    public static get Instance() {\n        return this._instance || (this._instance = new this());\n    } \n\n    public async fetchItemStats(hashname: string): Promise <Item | null> {\n        const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n        const response = await fetch(apiUrl);\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile:Item = {\n                name: data.marketname,\n                pricelatest: data.pricelatest,\n                pricelatestsell: data.pricelatestsell,\n                pricemix: data.pricemix,\n                pricemedian: data.pricemedian,\n                pricereal: data.pricereal,\n                pricesafe: data.pricesafe,\n                priceavg: data.priceavg,\n                pricemin: data.pricemin,\n                pricemax: data.pricemax,\n                pricesafe24h: data.pricesafe24h,\n                pricesafe7d: data.pricesafe7d,\n                pricesafe30d: data.pricesafe30d,\n                pricesafe90d: data.pricesafe90d,\n                trendpoint: data.trendpoint,\n                offervolume: data.offervolume,\n                hourstosold: data.hourstosold,\n                sold24h: data.sold24h,\n                sold7d: data.sold7d,\n                sold30d: data.sold30d,\n                sold90d: data.sold90d,\n                buyorderprice: data.buyorderprice,\n                buyordermedian: data.buyordermedian,\n                buyorderavg: data.buyorderavg,\n                buyordervolume: data.buyordervolume,\n                image: data.image\n            }\n\n            console.log(\"fetchItemStats run.\");\n\n            console.log(data);\n            return dataProfile;\n    }\n\n    public async fetchRandomProfiles(limit: number): Promise<SteamProfile | null> {\n        const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile:SteamProfile = {\n                iD: data[0].steamID,\n                username: data[0].personaname,\n                fullAvatarImg: data[0].avatarfull,\n                countryCode: data[0].loccountrycode,\n                inventoryValue: data[0].inventoryworth.worth,\n                inventorySize: data[0].inventoryworth.size\n            }\n\n            console.log(\"fetchRandomProfiles run.\");\n\n            console.log(data);\n            return dataProfile;\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n\n    public async fetchItemHistory(hashname: string): Promise<History | null> {\n        const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&start_date=2023-01-01&end_date=2024-01-01`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            // const dataProfile:History = {\n               // avg: data\n            // }\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n        return null;\n    }\n\n}\n\n\nexport const CSAPIInstance = CSAPI.Instance;\n\n/*\n\n    \"pricelatest\": 124.85,\n    \"pricelatestsell\": 117.65,\n    \"pricemix\": 117.65,\n    \"pricemedian\": 125.85,\n    \"pricereal\": 75,\n    \"pricesafe\": 115.74,\n    \"priceavg\": 150.22,\n    \"pricemin\": 97.47,\n    \"pricemax\": 164.04,\n    \"pricesafe24h\": 106.86,\n    \"pricesafe7d\": 106.86,\n    \"pricesafe30d\": 117.82,\n    \"pricesafe90d\": 125.77,\n    \"trendpoint\": 40,\n    \"offervolume\": 47,\n    \"hourstosold\": 3,\n    \"sold24h\": 12,\n    \"sold7d\": 55,\n    \"sold30d\": 249,\n    \"sold90d\": 896,\n    \"buyorderprice\": 115.74,\n    \"buyordermedian\": 115.7,\n*/\n/*\n[\n    {\n        \"id\": 103705028,\n        \"avg\": 1264.02,\n        \"median\": 1264.02,\n        \"price\": 1326.5,\n        \"sold\": 2,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-11-15T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704996,\n        \"avg\": 1433.54,\n        \"median\": 1433.54,\n        \"price\": 1433.54,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-26T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704977,\n        \"avg\": 1891.59,\n        \"median\": 1891.59,\n        \"price\": 1891.59,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-10-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704937,\n        \"avg\": 1676.22,\n        \"median\": 1676.22,\n        \"price\": 1676.22,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-16T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    },\n    {\n        \"id\": 103704926,\n        \"avg\": 1566.11,\n        \"median\": 1566.11,\n        \"price\": 1566.11,\n        \"sold\": 1,\n        \"ismonthly\": false,\n        \"createdat\": \"2023-09-06T00:00:00+00:00\",\n        \"itemid\": \"a12808b2-ce7e-45c8-a759-706a36e6bcfc\"\n    }\n]\n*/"],"mappings":"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;IACf;EACJ;EAEA,MAAaC,gBAAgBA,CAACvD,QAAgB,EAA2B;IACrE,MAAMC,MAAM,GAAI,sDAAqDP,OAAQ,4CAA2C;IACxH,IAAI;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;MACpC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAElC;MACG;MACH;IAEJ,CAAC,CAAC,OAAO8C,KAAK,EAAE;MACZjB,OAAO,CAACiB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACf;IACA,OAAO,IAAI;EACf;AAEJ;AAACE,MAAA,GA1GoB7D,KAAK;AAALA,KAAK,CAEPG,SAAS;AA2G5B,OAAO,MAAM2D,aAAa,GAAG9D,KAAK,CAACE,QAAQ;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}