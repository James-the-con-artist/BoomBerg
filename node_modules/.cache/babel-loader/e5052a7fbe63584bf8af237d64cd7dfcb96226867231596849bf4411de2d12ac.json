{"ast":null,"code":"var _class;\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\nexport default class CSAPI {\n  constructor() {}\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  async fetchItemStats(hashname) {\n    const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const dataProfile = {\n        pricelatest: data.pricelatest,\n        pricelatestsell: data.pricelatestsell,\n        pricemix: data.pricemix,\n        pricemedian: data.pricemedian,\n        pricereal: data.pricereal,\n        pricesafe: data.pricesafe,\n        priceavg: data.priceavg,\n        pricemin: data.pricemin,\n        pricemax: data.pricemax,\n        pricesafe24h: data.pricesafe24h,\n        pricesafe7d: data.pricesafe7d,\n        pricesafe30d: data.pricesafe30d,\n        pricesafe90d: data.pricesafe90d,\n        trendpoint: data.trendpoint,\n        offervolume: data.offervolume,\n        hourstosold: data.hourstosold,\n        sold24h: data.sold24h,\n        sold7d: data.sold7d,\n        sold30d: data.sold30d,\n        sold90d: data.sold90d,\n        buyorderprice: data.buyorderprice,\n        buyordermedian: data.buyordermedian,\n        buyorderavg: data.buyorderavg,\n        buyordervolume: data.buyordervolume,\n        image: data.image\n      };\n      console.log(\"run.\");\n      console.log(data);\n      return dataProfile;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n  async fetchRandomProfiles(limit) {\n    const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n    try {\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const dataProfile = {\n        iD: data[0].steamID,\n        username: data[0].personaname,\n        fullAvatarImg: data[0].avatarfull,\n        countryCode: data[0].loccountrycode,\n        inventoryValue: data[0].inventoryworth.worth,\n        inventorySize: data[0].inventoryworth.size\n      };\n      console.log(\"run.\");\n      console.log(data);\n      return dataProfile;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null;\n    }\n  }\n}\n_class = CSAPI;\nCSAPI._instance = void 0;\nexport const CSAPIInstance = CSAPI.Instance;","map":{"version":3,"names":["API_KEY","CSAPI","constructor","Instance","_instance","fetchItemStats","hashname","apiUrl","response","fetch","ok","Error","status","data","json","dataProfile","pricelatest","pricelatestsell","pricemix","pricemedian","pricereal","pricesafe","priceavg","pricemin","pricemax","pricesafe24h","pricesafe7d","pricesafe30d","pricesafe90d","trendpoint","offervolume","hourstosold","sold24h","sold7d","sold30d","sold90d","buyorderprice","buyordermedian","buyorderavg","buyordervolume","image","console","log","error","fetchRandomProfiles","limit","iD","steamID","username","personaname","fullAvatarImg","avatarfull","countryCode","loccountrycode","inventoryValue","inventoryworth","worth","inventorySize","size","_class","CSAPIInstance"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/CounterStrikeApi.ts"],"sourcesContent":["import { Item, SteamProfile } from \"./CSAPIModels\";\n\nexport const API_KEY = \"YPVIUFGK5JYWHLVM\";\n\nexport default class CSAPI {\n   \n    private static _instance: CSAPI;\n\n    private constructor() {\n\n    }\n\n    public static get Instance() {\n        return this._instance || (this._instance = new this());\n    } \n\n    public async fetchItemStats(hashname: string): Promise <Item | null> {\n        const apiUrl = `https://www.steamwebapi.com/steam/api/item?key=${API_KEY}&market_hash_name=${hashname}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile:Item = {\n                pricelatest: data.pricelatest,\n                pricelatestsell: data.pricelatestsell,\n                pricemix: data.pricemix,\n                pricemedian: data.pricemedian,\n                pricereal: data.pricereal,\n                pricesafe: data.pricesafe,\n                priceavg: data.priceavg,\n                pricemin: data.pricemin,\n                pricemax: data.pricemax,\n                pricesafe24h: data.pricesafe24h,\n                pricesafe7d: data.pricesafe7d,\n                pricesafe30d: data.pricesafe30d,\n                pricesafe90d: data.pricesafe90d,\n                trendpoint: data.trendpoint,\n                offervolume: data.offervolume,\n                hourstosold: data.hourstosold,\n                sold24h: data.sold24h,\n                sold7d: data.sold7d,\n                sold30d: data.sold30d,\n                sold90d: data.sold90d,\n                buyorderprice: data.buyorderprice,\n                buyordermedian: data.buyordermedian,\n                buyorderavg: data.buyorderavg,\n                buyordervolume: data.buyordervolume,\n                image: data.image\n            }\n\n            console.log(\"run.\");\n\n            console.log(data);\n            return dataProfile;\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n\n    public async fetchRandomProfiles(limit: number): Promise<SteamProfile | null> {\n        const apiUrl = `https://www.steamwebapi.com/explore/api/random?key=${API_KEY}&limit=${limit}`;\n        try {\n            const response = await fetch(apiUrl);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            const dataProfile:SteamProfile = {\n                iD: data[0].steamID,\n                username: data[0].personaname,\n                fullAvatarImg: data[0].avatarfull,\n                countryCode: data[0].loccountrycode,\n                inventoryValue: data[0].inventoryworth.worth,\n                inventorySize: data[0].inventoryworth.size\n            }\n\n            console.log(\"run.\");\n\n            console.log(data);\n            return dataProfile;\n\n        } catch (error) {\n            console.error('Error fetching data:', error);\n            return null;\n        }\n    }\n}\n\nexport const CSAPIInstance = CSAPI.Instance;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}