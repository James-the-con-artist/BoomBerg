{"ast":null,"code":"var _class;\nclass OpenAIApiSingleton {\n  constructor(apiKey) {\n    this.apiKey = void 0;\n    this.apiKey = apiKey;\n  }\n  static getInstance(apiKey) {\n    if (!OpenAIApiSingleton.instance) {\n      OpenAIApiSingleton.instance = new OpenAIApiSingleton(apiKey);\n    }\n    return OpenAIApiSingleton.instance;\n  }\n  async generateText(prompt) {\n    const url = 'https://api.openai.com/v1/engines/davinci/completions';\n    const headers = {\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Content-Type': 'application/json'\n    };\n    console.log(\"post run\");\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          prompt: prompt,\n          max_tokens: 10\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.choices[0].text;\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      throw error;\n    }\n  }\n}\n_class = OpenAIApiSingleton;\nOpenAIApiSingleton.instance = void 0;\nexport default OpenAIApiSingleton;","map":{"version":3,"names":["OpenAIApiSingleton","constructor","apiKey","getInstance","instance","generateText","prompt","url","headers","console","log","response","fetch","method","body","JSON","stringify","max_tokens","ok","Error","status","data","json","choices","text","error","_class"],"sources":["/Users/james/dev/miniHack-23/boomberg/src/classes/OpenAIAPI.ts"],"sourcesContent":["class OpenAIApiSingleton {\n    private static instance: OpenAIApiSingleton;\n    private apiKey: string;\n\n    private constructor(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    public static getInstance(apiKey: string): OpenAIApiSingleton {\n        if (!OpenAIApiSingleton.instance) {\n            OpenAIApiSingleton.instance = new OpenAIApiSingleton(apiKey);\n        }\n        return OpenAIApiSingleton.instance;\n    }\n\n    public async generateText(prompt: string): Promise<string> {\n        const url = 'https://api.openai.com/v1/engines/davinci/completions';\n        const headers = {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'Content-Type': 'application/json',\n        };\n\n        console.log(\"post run\");\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({\n                    prompt: prompt,\n                    max_tokens: 10\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data.choices[0].text;\n        } catch (error) {\n            console.error('Error calling OpenAI API:', error);\n            throw error;\n        }\n    }\n}\n\nexport default OpenAIApiSingleton;"],"mappings":";AAAA,MAAMA,kBAAkB,CAAC;EAIbC,WAAWA,CAACC,MAAc,EAAE;IAAA,KAF5BA,MAAM;IAGV,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EAEA,OAAcC,WAAWA,CAACD,MAAc,EAAsB;IAC1D,IAAI,CAACF,kBAAkB,CAACI,QAAQ,EAAE;MAC9BJ,kBAAkB,CAACI,QAAQ,GAAG,IAAIJ,kBAAkB,CAACE,MAAM,CAAC;IAChE;IACA,OAAOF,kBAAkB,CAACI,QAAQ;EACtC;EAEA,MAAaC,YAAYA,CAACC,MAAc,EAAmB;IACvD,MAAMC,GAAG,GAAG,uDAAuD;IACnE,MAAMC,OAAO,GAAG;MACZ,eAAe,EAAG,UAAS,IAAI,CAACN,MAAO,EAAC;MACxC,cAAc,EAAE;IACpB,CAAC;IAEDO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAEvB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;QAC9BM,MAAM,EAAE,MAAM;QACdL,OAAO,EAAEA,OAAO;QAChBM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBV,MAAM,EAAEA,MAAM;UACdW,UAAU,EAAE;QAChB,CAAC;MACL,CAAC,CAAC;MAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZhB,OAAO,CAACgB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;AACJ;AAACC,MAAA,GA7CK1B,kBAAkB;AAAlBA,kBAAkB,CACLI,QAAQ;AA8C3B,eAAeJ,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}